package itml.agents;

import itml.cards.Card;
import itml.cards.CardRest;
import itml.simulator.CardDeck;
import itml.simulator.StateAgent;
import itml.simulator.StateBattle;
import weka.classifiers.Classifier;
import weka.classifiers.trees.J48;
import weka.core.Instance;
import weka.core.Instances;

import java.util.ArrayList;


/**
 *  This class ...
 *
 *  @authors        Arnar Freyr Bjarnason
 *                  Kjartan Valur Kjartansson
 *                  JÛn GÌsli Bˆjrgvinsson
 */
public class MyAgent2 extends Agent{
    private int m_noThisAgent;     // Index of our agent (0 or 1).
    private int m_noOpponentAgent; // Index of opponent's agent.
    private Classifier classifier_;
    private Instances dataset;
    boolean learned;

    public MyAgent2 ( CardDeck deck, int msConstruct, int msPerMove, int msLearn){
        super(deck, msConstruct, msPerMove, msLearn);
        classifier_ = new J48();
        learned = false;
    }

    @Override
    public void startGame( int noThisAgent, StateBattle stateBattle ){
        m_noThisAgent = noThisAgent;
        m_noOpponentAgent = (noThisAgent == 0) ? 1 : 0;
    }

    @Override
    public void endGame( StateBattle stateBattle, double [] results ){

    }

    
    /**
     * Gets a move, where the next card of the opponent is not predicted
     *
     * @param stateBattle       Current state of game
     * @return card with no prediction
     */
    private Card getStupidMove(StateBattle stateBattle){
        StateAgent agent = stateBattle.getAgentState(m_noThisAgent);
        StateAgent oAgent = stateBattle.getAgentState(m_noOpponentAgent);

        if(agent.getHealthPoints() >= oAgent.getHealthPoints()){
            Card c;
            if((c = attack(stateBattle, null)) != null) return c;
            else if((c = moveCloser(stateBattle, null)) != null) return c;
        }
        else{
            Card c;
            if((c = moveAway(stateBattle, null)) != null) return c;
        }
        return new CardRest();
    }
    
    /**
     * Will return the card that brings the agent as far from the opponent as possible
     *
     * @param stateBattle       Current state of the game
     * @param oCard             The predicted enemy card / null
     * @return a card moving the agent away from the opponent / null if none found
     */
    private Card moveAway(StateBattle stateBattle, Card oCard){
        Card [] move = new Card[2];
        if(learned) move[m_noOpponentAgent] = oCard;    // Predict where opponent moves
        else move[m_noOpponentAgent] = new CardRest();  // Assume opponent will remain still

        Card bestCard = null;
        int  minDistance = calcDistanceBetweenAgents( stateBattle );

        ArrayList<Card> cards = m_deck.getCards( stateBattle.getAgentState( m_noThisAgent ).getStaminaPoints() );
        // Move further from opponent
        for ( Card card : cards ) {
            StateBattle bs = (StateBattle) stateBattle.clone();   // clone the state, as play( ) modifies it.
            move[m_noThisAgent] = card;
            bs.play( move );
            int  distance = calcDistanceBetweenAgents( bs );
            if ( distance > minDistance ) {
                bestCard = card;
                minDistance = distance;
            }
        }
        return bestCard;
    }

    /**
     * Will return a card that brings the agent as close to the opponent as possible
     *
     * @param stateBattle       Current state of the game
     * @param oCard             The predicted enemy card / null
     * @return a card moving agent closer to opponent / null if none found
     */
    private Card moveCloser( StateBattle stateBattle, Card oCard){
        Card [] move = new Card[2];
        if(learned) move[m_noOpponentAgent] = oCard;    // Predict where opponent moves
        else move[m_noOpponentAgent] = new CardRest();  // Assume opponent will remain still

        Card bestCard = null;
        int  bestDistance = calcDistanceBetweenAgents( stateBattle );

        ArrayList<Card> cards = m_deck.getCards(stateBattle.getAgentState( m_noThisAgent ).getStaminaPoints());
        // Move closer to the opponent.
        for ( Card card : cards ) {
            StateBattle bs = (StateBattle) stateBattle.clone();   // clone the state, as play( ) modifies it.
            move[m_noThisAgent] = card;
            bs.play( move );
            int  distance = calcDistanceBetweenAgents( bs );
            if ( distance < bestDistance ) {
                bestCard = card;
                bestDistance = distance;
            }
        }
        return bestCard;
    }
    
    private Card attack( StateBattle stateBattle, Card oCard){
        Card[] move = new Card[2];
        if(learned) move[m_noOpponentAgent] = oCard;
        else move[m_noOpponentAgent] = new CardRest();

        Card bestCard = null;
        int bestSTAT = 0;

        ArrayList<Card> cards = m_deck.getCards(stateBattle.getAgentState( m_noThisAgent ).getStaminaPoints());
        // Find attack cards
        for ( Card card : cards ) {
            if ( card.getType() == Card.CardActionType.ctAttack) {

                StateBattle bs = (StateBattle) stateBattle.clone();   // clone the state, as play( ) modifies it.
                move[m_noThisAgent] = card;
                bs.play( move );
                StateAgent agent = bs.getAgentState( m_noThisAgent );
                StateAgent oAgent  = bs.getAgentState(m_noOpponentAgent);

                // In range?
                if(card.inAttackRange(agent.getCol(), agent.getRow(), oAgent.getCol(), oAgent.getRow())) {
                    if (oAgent.getHealthPoints() - card.getHitPoints() <= 0) return card; // Killing move?
                    // Find strongest attack card
                    if (card.getHitPoints() + card.getDefencePoints() > bestSTAT) {
                        bestSTAT = card.getHitPoints() + card.getDefencePoints();
                        bestCard = card;
                    }
                }
            }
        }

        return bestCard;
    }
    
    @Override
    public Card act( StateBattle stateBattle ){
    	if (!learned)
    	{
    		return getStupidMove(stateBattle);
    	}
        double[] values = new double[8];
        StateAgent a = stateBattle.getAgentState(0);
        StateAgent o = stateBattle.getAgentState(1);
        values[0] = a.getCol();
        values[1] = a.getRow();
        values[2] = a.getHealthPoints();
        values[3] = a.getStaminaPoints();
        values[4] = o.getCol();
        values[5] = o.getRow();
        values[6] = o.getHealthPoints();
        values[7] = o.getStaminaPoints();
        try {
            ArrayList<Card> allCards = m_deck.getCards();
            ArrayList<Card> cards = m_deck.getCards(a.getStaminaPoints());
            Instance i = new Instance(1.0, values.clone());
            i.setDataset(dataset);
            int out = (int)classifier_.classifyInstance(i);
            Card selected = allCards.get(out);
            if(cards.contains(selected)) {
                return getMove(stateBattle, selected);
            }
        } catch (Exception e) {
            System.out.println("Error classifying new instance: " + e.toString());
        }
        return new CardRest();  //To change body of implemented methods use File | Settings | File Templates.
    }

    @Override
    public Classifier learn( Instances instances ){
        learned = true;
        dataset = instances;
        dataset.setClassIndex(8);
        try {
            classifier_.buildClassifier(instances);
        } catch (Exception e){
            System.out.println("Error training classifier: " + e.toString());
        }
        return null;
    }

    /**
     * Get our next move, based on that the opponents move is oCard
     *
     * @param stateBattle       Current state of game
     * @param oCard             Predicted opponent move
     *
     * @return
     */

    private Card getMove( StateBattle stateBattle, Card oCard){
        StateAgent a = stateBattle.getAgentState(m_noThisAgent);
        StateAgent o = stateBattle.getAgentState(m_noOpponentAgent);
        ArrayList<Card> allCards = m_deck.getCards();
        ArrayList<Card> cards = m_deck.getCards(a.getStaminaPoints());
        Card[] plays = new Card[2];
        if(a.getStaminaPoints() == 0 
        		|| (a.getStaminaPoints() < 3 
        				&& calcDistanceBetweenAgents(stateBattle) > 2)) {
        	return new CardRest();
        }
        if (a.getHealthPoints() >= o.getHealthPoints() 
        		&& a.getStaminaPoints() > 0
        		&& calcDistanceBetweenAgents(stateBattle) > 1)
        	return moveCloser(stateBattle, oCard);
        
        Card bestCard = new CardRest();
        double bestScore = -1000;
        for(Card c : cards) {
        	if (c.getName().equals("cRest"))
        		continue;
        	if (c.getName().equals("cMoveLeft") && a.getCol() == 0)
        		continue;
        	if (c.getName().equals("cLeapLeft") && (a.getCol() == 0 || a.getCol() == 1))
        		continue;
        	if (c.getName().equals("cMoveRight") && a.getCol() == stateBattle.getNumColumns()-1)
        		continue;
        	if (c.getName().equals("cLeapRight") && (a.getCol() == stateBattle.getNumColumns()-2) || a.getCol() == stateBattle.getNumColumns()-1)
        		continue;
        	if (c.getName().equals("cMoveDown") && a.getRow() == 0)
        		continue;
        	if (c.getName().equals("cMoveUp") && a.getRow() == stateBattle.getNumRows() - 1)
        		continue;
        	
        	StateBattle cloneState = (StateBattle)stateBattle.clone();
        	plays[m_noThisAgent] = c;
        	plays[m_noOpponentAgent] = oCard;
        	cloneState.play(plays);
        	double score = stateScore(cloneState);
        	if(score > bestScore) {
        		bestScore = score;
        		bestCard = c;
        	}
        }
        System.out.println(bestCard.getName());
    	return bestCard;
    }

    private int calcDistanceBetweenAgents( StateBattle stateBattle ) {

        StateAgent asFirst = stateBattle.getAgentState( 0 );
        StateAgent asSecond = stateBattle.getAgentState( 1 );

        return Math.abs( asFirst.getCol() - asSecond.getCol() ) + Math.abs( asFirst.getRow() - asSecond.getRow() );
    }
    
    /**
     * Calculates a desirability score for a given state based on agents' health and 
     * stamina. Consider adding a factor based on distance between agents.
     * 
     * @param stateBattle
     * @return
     */
    private double stateScore( StateBattle stateBattle) {
    	StateAgent ourState = stateBattle.getAgentState(m_noThisAgent);
    	StateAgent enemyState = stateBattle.getAgentState(m_noOpponentAgent);
    	double dist = calcDistanceBetweenAgents(stateBattle);
    	if (ourState.getHealthPoints() < enemyState.getHealthPoints())
    		dist = -dist;
    	
    	
    	return (double)ourState.getHealthPoints()*50 + (double)ourState.getStaminaPoints()
    			- (double)enemyState.getHealthPoints()*50 - (double)enemyState.getStaminaPoints()
    			+ dist*5;    	
    }
}
