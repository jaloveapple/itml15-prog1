package itml.agents;

import itml.cards.Card;
import itml.cards.CardAttackCardinal;
import itml.cards.CardAttackDiagonal;
import itml.cards.CardAttackLong;
import itml.cards.CardDefend;
import itml.cards.CardLeapLeft;
import itml.cards.CardLeapRight;
import itml.cards.CardMoveDown;
import itml.cards.CardMoveLeft;
import itml.cards.CardMoveRight;
import itml.cards.CardMoveUp;
import itml.cards.CardRest;
import itml.simulator.CardDeck;
import itml.simulator.StateAgent;
import itml.simulator.StateBattle;
import weka.classifiers.Classifier;
import weka.classifiers.trees.J48;
import weka.core.Instance;
import weka.core.Instances;

import java.util.ArrayList;


/**
 *  This class ...
 *
 *  @authors        Arnar Freyr Bjarnason
 *                  Kjartan Valur Kjartansson
 *                  *insert name*
 */
public class MyAgent extends Agent{
    private int m_noThisAgent;     // Index of our agent (0 or 1).
    private int m_noOpponentAgent; // Index of opponent's agent.
    private Classifier classifier_;
    private Instances dataset;
    boolean learned;

    public MyAgent ( CardDeck deck, int msConstruct, int msPerMove, int msLearn){
        super(deck, msConstruct, msPerMove, msLearn);
        classifier_ = new J48();
        learned = false;
    }

    @Override
    public void startGame( int noThisAgent, StateBattle stateBattle ){
        m_noThisAgent = noThisAgent;
        m_noOpponentAgent = (noThisAgent == 0) ? 1 : 0;

    }

    @Override
    public void endGame( StateBattle stateBattle, double [] results ){

    }
    

    
    public double calcPoints(StateBattle sb)
    {
    	StateAgent a = sb.getAgentState(m_noThisAgent);
    	StateAgent o = sb.getAgentState(m_noOpponentAgent);
    	int dist = calcDistanceBetweenAgents(sb);
    	
    	return ((a.getHealthPoints()/o.getHealthPoints())
    			* (a.getStaminaPoints()/o.getStaminaPoints()));	
    }


    @Override
    public Card act( StateBattle stateBattle ){
    	
//    	System.out.println("ACTING.");
    	
    	double[] values = new double[8];
        StateAgent a = stateBattle.getAgentState(m_noThisAgent);
        StateAgent o = stateBattle.getAgentState(m_noOpponentAgent);
        values[0] = a.getCol();
        values[1] = a.getRow();
        values[2] = a.getHealthPoints();
        values[3] = a.getStaminaPoints();
        values[4] = o.getCol();
        values[5] = o.getRow();
        values[6] = o.getHealthPoints();
        values[7] = o.getStaminaPoints();
        try {
            ArrayList<Card> allCards = m_deck.getCards();
            ArrayList<Card> o_cards = m_deck.getCards(o.getStaminaPoints());
            ArrayList<Card> a_cards = m_deck.getCards(a.getStaminaPoints());
            
            
            Instance i = new Instance(1.0, values.clone());
            i.setDataset(dataset);
            int out = (int)classifier_.classifyInstance(i);
            Card selected = allCards.get(out);
            
            //our prediction is wrong. What to do?
            if (!o_cards.contains(selected))
	            return null;
            
//            System.out.println("VALID PREDICTION");
            
            Card[] move = new Card[2];
            move[m_noOpponentAgent] = selected;
            
            double bestScore = Integer.MIN_VALUE;
            Card bestCard = null;
            for (int x = 0; x < a_cards.size(); x++)
            {
//            	System.out.println("TRYING ACTION: " + x);
            	
            	StateBattle sbClone = (StateBattle)stateBattle.clone();
            	
            	move[m_noThisAgent] = a_cards.get(x);
            	sbClone.play(move);
            	double score = calcPoints(sbClone);
            	if (score > bestScore)
            	{
            		bestScore = score;
            		bestCard = a_cards.get(x);
            	}
            	
            }
            
            System.out.println("OPPONENT'S CARD: " + selected.getName());
            System.out.println("RETURNING CARD: " + bestCard.getName());
            return bestCard;
            
            
        } catch (Exception e) {
            System.out.println("Error classifying new instance: " + e.toString());
        }
        return new CardRest();  //To change body of implemented methods use File | Settings | File Templates.
    }

    @Override
    public Classifier learn( Instances instances ){
        learned = true;
        dataset = instances;
        try {
            classifier_.buildClassifier(instances);
        } catch (Exception e){
            System.out.println("Error training classifier: " + e.toString());
        }
        return null;
    }

    private int calcDistanceBetweenAgents( StateBattle bs ) {

        StateAgent asFirst = bs.getAgentState( 0 );
        StateAgent asSecond = bs.getAgentState( 1 );

        return Math.abs( asFirst.getCol() - asSecond.getCol() ) + Math.abs( asFirst.getRow() - asSecond.getRow() );
    }
}
